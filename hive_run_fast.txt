set hive.execution.engine=tez;


Vectorized query execution improves performance of operations like scans, aggregations, filters and joins, by performing them in batches of 1024 rows at once instead of single row each time.

Introduced in Hive 0.13, this feature significantly improves query execution time, and is easily enabled with two parameters settings:

set hive.vectorized.execution.enabled = true;

set hive.vectorized.execution.reduce.enabled = true;


A recent addition to Hive, Cost-based optimization, performs further optimizations based on query cost, resulting in potentially different decisions: how to order joins, which type of join to perform, degree of parallelism and others.

To use cost-based optimization (also known as CBO), set the following parameters at the beginning of your query:

set hive.cbo.enable=true;

set hive.compute.query.using.stats=true;

set hive.stats.fetch.column.stats=true;

set hive.stats.fetch.partition.stats=true;


For partitioning in hive table set following properties true:


SET hive.exec.dynamic.partition = true;

SET hive.exec.dynamic.partition.mode = nonstrict;


For faster data processing hive query example:-

reate Table Employee_Part(EmloyeeID int, EmployeeName Varchar(100), 

                           Address Varchar(100),State Varchar(100),

                           Zipcode Varchar(100))

PARTITIONED BY (City Varchar(100))

Clustered By (EmployeeID) into 20 Buckets

ROW FORMAT DELIMITED

FIELDS TERMINATED BY ','

STORED AS TEXTFILE;



creating views

Create view managers as select * from employees_no_partition where size(subordinates) > 0;


crete table from views

create table tblmanagers like managers;


altering view

alter view managers set tblproperties('created_at'='some_timestamp');


https://issues.apache.org/jira/browse/HIVE-18448

https://www.slideshare.net/BenjaminLeonhardi/hive-loading-data

Create Index in Hive

CREATE INDEX index_name
ON TABLE table_name (columns,....)
AS 'org.apache.hadoop.hive.ql.index.compact.CompactIndexHandler'
WITH DEFERRED REBUILD;

create index employees_partitioned_index on
 table mydb.employees_partitioned (country) as 'org.apache.hadoop.hive.ql.index.compact.CompactIndexHandler'
with deferred rebuild idxproperties
('creator'='me', 'created_at'='some_time')in table mydb.employees_index_tablePARTITIONED BY
 (country, name)
comment 'employees_partitioned
 by country and name');
 
 
 Altering Index in hive
 
alter index employee_index
 
on table employees
 
partition(country='US')
 
rebuild;


Hive has limited indexing capabilites

–> There are no keys; but you can build indexes on columns to speed some operations

–> Index data for a table is stored in another table.
